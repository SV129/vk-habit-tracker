// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∫, –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
/*if (typeof vkConnect === 'undefined') {
    window.vkConnect = {
        send: (method, params) => {
            console.log(`[VK Mock] ${method}`, params);
            return Promise.resolve();
        }
    };
    console.log("–†–µ–∂–∏–º —Ç–µ—Å—Ç–∞: VK Connect –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ!");
}*/

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ VK Bridge
const vkBridge = require('@vkontakte/vk-bridge');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initializeApp() {
  try {
    // 1. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK Mini App
    await vkBridge.send('VKWebAppInit');
    console.log('VK Mini App initialized');

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await vkBridge.send('VKWebAppGetUserInfo');
    updateMotivationMessage(`–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! –ù–∞—á–Ω–∏ —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏!`);

    // 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    await vkBridge.send('VKWebAppTrackEvent', {
      event_name: 'app_launch',
      event_data: { timestamp: Date.now() }
    });

    // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–∏–≤—ã—á–µ–∫
    initHabitTracker();

  } catch (error) {
    console.error('VK API Error:', error);
    handleVKBridgeError();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ VK Bridge
function handleVKBridgeError() {
  // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  if (!window.vkBridge) {
    window.vkBridge = {
      send: (method, params) => {
        console.log(`[MOCK] ${method}`, params);
        if (method === 'VKWebAppGetUserInfo') {
          return Promise.resolve({ 
            first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
            last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            id: 1234567
          });
        }
        return Promise.resolve({});
      }
    };
    updateMotivationMessage('–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (VK Bridge –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)');
  }
  initHabitTracker();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–∏–≤—ã—á–µ–∫
function initHabitTracker() {
  const elements = {
    habitInput: document.getElementById('habit-input'),
    addBtn: document.getElementById('add-btn'),
    habitsList: document.querySelector('.habits-list'),
    progressFill: document.querySelector('.progress-fill'),
    completedCount: document.getElementById('completed-count'),
    totalCount: document.getElementById('total-count'),
    motivation: document.querySelector('.motivation')
  };

  let habits = JSON.parse(localStorage.getItem('habits')) || [];

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫
  function loadHabits() {
    elements.habitsList.innerHTML = '';
    habits.forEach((habit, index) => {
      const habitItem = document.createElement('div');
      habitItem.className = 'habit-item';
      habitItem.innerHTML = `
        <span class="habit-name">${habit.name}</span>
        <div class="habit-actions">
          <button class="complete-btn" data-index="${index}">
            ${habit.completed ? '‚úÖ' : '‚òëÔ∏è'}
          </button>
          <button class="delete-btn" data-index="${index}">üóëÔ∏è</button>
        </div>
      `;
      elements.habitsList.appendChild(habitItem);
    });
    updateStats();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  function updateStats() {
    const total = habits.length;
    const completed = habits.filter(habit => habit.completed).length;
    const progress = total > 0 ? (completed / total) * 100 : 0;

    elements.progressFill.style.width = `${progress}%`;
    elements.completedCount.textContent = completed;
    elements.totalCount.textContent = total;
    localStorage.setItem('habits', JSON.stringify(habits));
    updateMotivationMessage(getMotivationText(completed, total));
  }

  // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  function getMotivationText(completed, total) {
    const messages = {
      noHabits: "–î–æ–±–∞–≤—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É!",
      allCompleted: "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏!",
      default: [
        "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º!",
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        "–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!"
      ]
    };

    if (total === 0) return messages.noHabits;
    if (completed === total) return messages.allCompleted;
    return messages.default[Math.floor(Math.random() * messages.default.length)];
  }

  function updateMotivationMessage(text) {
    elements.motivation.textContent = text;
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
  elements.addBtn.addEventListener('click', async () => {
    const name = elements.habitInput.value.trim();
    if (name) {
      habits.push({ name, completed: false });
      elements.habitInput.value = '';
      
      try {
        await vkBridge.send('VKWebAppTrackEvent', {
          event_name: 'habit_added',
          event_data: { habit_name: name }
        });
      } catch (e) {
        console.error('Analytics error:', e);
      }
      
      loadHabits();
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
  elements.habitsList.addEventListener('click', async (e) => {
    const index = e.target.dataset?.index;
    if (index === undefined) return;

    if (e.target.classList.contains('complete-btn')) {
      habits[index].completed = !habits[index].completed;
      
      try {
        await vkBridge.send('VKWebAppTrackEvent', {
          event_name: habits[index].completed ? 'habit_completed' : 'habit_unchecked',
          event_data: { habit_name: habits[index].name }
        });
      } catch (e) {
        console.error('Analytics error:', e);
      }
      
      loadHabits();
    } else if (e.target.classList.contains('delete-btn')) {
      const deletedHabit = habits[index].name;
      habits.splice(index, 1);
      
      try {
        await vkBridge.send('VKWebAppTrackEvent', {
          event_name: 'habit_deleted',
          event_data: { habit_name: deletedHabit }
        });
      } catch (e) {
        console.error('Analytics error:', e);
      }
      
      loadHabits();
    }
  });

  // –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  loadHabits();
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', initializeApp);
