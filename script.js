// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∫, –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
/*if (typeof vkConnect === 'undefined') {
    window.vkConnect = {
        send: (method, params) => {
            console.log(`[VK Mock] ${method}`, params);
            return Promise.resolve();
        }
    };
    console.log("–†–µ–∂–∏–º —Ç–µ—Å—Ç–∞: VK Connect –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ!");
}*/

// –ú–∞—Å—Å–∏–≤ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
const motivationData = {
    daily: [
        "–°–µ–≥–æ–¥–Ω—è ‚Äî —Ç–≤–æ–π –¥–µ–Ω—å! üåü",
        "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º! üë£",
        "–¢—ã –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—É–º–∞–µ—à—å! üí™"
    ],
    progress: [
        {threshold: 0, message: "–°–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üöÄ"},
        {threshold: 30, message: "–•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üå±"},
        {threshold: 70, message: "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üî•"},
        {threshold: 100, message: "–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢—ã –ø—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä! üéØ"}
    ],
    encouragement: [
        "–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! ‚ú®",
        "–í–µ—Ä—å –≤ —Å–µ–±—è ‚Äî —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –±–æ–ª—å—à–µ–µ! üí´",
        "–ö–∞–∂–¥–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –ª—É—á—à–µ! üåø"
    ]
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
function initVK() {
    if (typeof vkConnect !== 'undefined') {
        vkConnect.send("VKWebAppInit", {})
            .then(() => console.log("VK Mini App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"))
            .catch(err => console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", err));
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function sendMotivationNotification(message) {
    if (typeof vkConnect !== 'undefined') {
        vkConnect.send("VKWebAppShowSnackbar", {
            text: message,
            timeout: 3000
        }).catch(err => console.error("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", err));
    }
    updateMotivationMessage(message);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function updateMotivationMessage(message) {
    const motivationElement = document.querySelector('.motivation');
    if (message) {
        motivationElement.textContent = message;
        return;
    }
    
    // –°–ª—É—á–∞–π–Ω–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const randomDaily = motivationData.daily[
        Math.floor(Math.random() * motivationData.daily.length)
    ];
    motivationElement.textContent = randomDaily;
}

// –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è
function checkProgress(completed, total) {
    if (total === 0) return;
    
    const percentage = Math.round((completed / total) * 100);
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É
    for (const item of motivationData.progress.slice().reverse()) {
        if (percentage >= item.threshold) {
            sendMotivationNotification(item.message);
            break;
        }
    }
    
    // –°–ª—É—á–∞–π–Ω–æ–µ –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
    if (completed > 0 && completed % 3 === 0) {
        const randomEncouragement = motivationData.encouragement[
            Math.floor(Math.random() * motivationData.encouragement.length)
        ];
        sendMotivationNotification(randomEncouragement);
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    initVK();
    updateMotivationMessage();
    
    const habitInput = document.getElementById('habit-input');
    const addBtn = document.getElementById('add-btn');
    const habitsList = document.querySelector('.habits-list');
    const progressFill = document.querySelector('.progress-fill');
    const completedCount = document.getElementById('completed-count');
    const totalCount = document.getElementById('total-count');

    let habits = JSON.parse(localStorage.getItem('habits')) || [];

    function loadHabits() {
        habitsList.innerHTML = '';
        habits.forEach((habit, index) => {
            const habitItem = document.createElement('div');
            habitItem.className = 'habit-item';
            habitItem.innerHTML = `
                <span class="habit-name">${habit.name}</span>
                <div class="habit-actions">
                    <button class="complete-btn" data-index="${index}">
                        ${habit.completed ? '‚úÖ' : '‚òëÔ∏è'}
                    </button>
                    <button class="delete-btn" data-index="${index}">üóëÔ∏è</button>
                </div>
            `;
            habitsList.appendChild(habitItem);
        });
        updateStats();
    }

    function updateStats() {
        const total = habits.length;
        const completed = habits.filter(habit => habit.completed).length;
        const progress = total > 0 ? (completed / total) * 100 : 0;

        progressFill.style.width = `${progress}%`;
        completedCount.textContent = completed;
        totalCount.textContent = total;
        
        checkProgress(completed, total);
        localStorage.setItem('habits', JSON.stringify(habits));
    }

    addBtn.addEventListener('click', () => {
        const name = habitInput.value.trim();
        if (name) {
            habits.push({ name, completed: false });
            habitInput.value = '';
            sendMotivationNotification("–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≥–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è! üí™");
            loadHabits();
        } else {
            sendMotivationNotification("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏!");
        }
    });

    habitsList.addEventListener('click', (e) => {
        if (e.target.classList.contains('complete-btn')) {
            const index = e.target.dataset.index;
            habits[index].completed = !habits[index].completed;
            const action = habits[index].completed ? "completed" : "unchecked";
            sendMotivationNotification(
                action === "completed" 
                    ? "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üåü" 
                    : "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π! –ó–∞–≤—Ç—Ä–∞ –ø–æ–ª—É—á–∏—Ç—Å—è –ª—É—á—à–µ! üí´"
            );
            loadHabits();
        } else if (e.target.classList.contains('delete-btn')) {
            const index = e.target.dataset.index;
            habits.splice(index, 1);
            sendMotivationNotification("–ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è! üéØ");
            loadHabits();
        }
    });

    // –ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        sendMotivationNotification("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫! –ù–∞—á–Ω–∏ —Å–≤–æ—ë –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è! üöÄ");
    }, 5000);

    loadHabits();
});